/*
 * This file is generated by jOOQ.
 */
package generated_sources;


import generated_sources.tables.BlackListToken;
import generated_sources.tables.Image;
import generated_sources.tables.Order;
import generated_sources.tables.OrderProduct;
import generated_sources.tables.Product;
import generated_sources.tables.ShoppingCart;
import generated_sources.tables.User;
import generated_sources.tables.records.BlackListTokenRecord;
import generated_sources.tables.records.ImageRecord;
import generated_sources.tables.records.OrderProductRecord;
import generated_sources.tables.records.OrderRecord;
import generated_sources.tables.records.ProductRecord;
import generated_sources.tables.records.ShoppingCartRecord;
import generated_sources.tables.records.UserRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BlackListTokenRecord> BLACK_LIST_TOKEN_PKEY = Internal.createUniqueKey(BlackListToken.BLACK_LIST_TOKEN, DSL.name("black_list_token_pkey"), new TableField[] { BlackListToken.BLACK_LIST_TOKEN.ID }, true);
    public static final UniqueKey<ImageRecord> IMAGE_PKEY = Internal.createUniqueKey(Image.IMAGE, DSL.name("image_pkey"), new TableField[] { Image.IMAGE.ID }, true);
    public static final UniqueKey<OrderRecord> ORDER_PKEY = Internal.createUniqueKey(Order.ORDER, DSL.name("order_pkey"), new TableField[] { Order.ORDER.ID }, true);
    public static final UniqueKey<OrderProductRecord> ORDER_PRODUCT_PKEY = Internal.createUniqueKey(OrderProduct.ORDER_PRODUCT, DSL.name("order_product_pkey"), new TableField[] { OrderProduct.ORDER_PRODUCT.ID }, true);
    public static final UniqueKey<ProductRecord> PRODUCT_PKEY = Internal.createUniqueKey(Product.PRODUCT, DSL.name("product_pkey"), new TableField[] { Product.PRODUCT.ID }, true);
    public static final UniqueKey<ShoppingCartRecord> SHOPPING_CART_PKEY = Internal.createUniqueKey(ShoppingCart.SHOPPING_CART, DSL.name("shopping_cart_pkey"), new TableField[] { ShoppingCart.SHOPPING_CART.ID }, true);
    public static final UniqueKey<UserRecord> USER_PKEY = Internal.createUniqueKey(User.USER, DSL.name("user_pkey"), new TableField[] { User.USER.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ImageRecord, ProductRecord> IMAGE__IMAGE_PRODUCT_ID_FK = Internal.createForeignKey(Image.IMAGE, DSL.name("image_product_id_fk"), new TableField[] { Image.IMAGE.PRODUCT_ID }, Keys.PRODUCT_PKEY, new TableField[] { Product.PRODUCT.ID }, true);
    public static final ForeignKey<OrderRecord, UserRecord> ORDER__ORDER_USER_ID_FK = Internal.createForeignKey(Order.ORDER, DSL.name("order_user_id_fk"), new TableField[] { Order.ORDER.USER_ID }, Keys.USER_PKEY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<OrderProductRecord, OrderRecord> ORDER_PRODUCT__ORDER_PRODUCT_ORDER_ID_FK = Internal.createForeignKey(OrderProduct.ORDER_PRODUCT, DSL.name("order_product_order_id_fk"), new TableField[] { OrderProduct.ORDER_PRODUCT.ORDER_ID }, Keys.ORDER_PKEY, new TableField[] { Order.ORDER.ID }, true);
    public static final ForeignKey<OrderProductRecord, ProductRecord> ORDER_PRODUCT__ORDER_PRODUCT_PRODUCT_ID_FK = Internal.createForeignKey(OrderProduct.ORDER_PRODUCT, DSL.name("order_product_product_id_fk"), new TableField[] { OrderProduct.ORDER_PRODUCT.PRODUCT_ID }, Keys.PRODUCT_PKEY, new TableField[] { Product.PRODUCT.ID }, true);
    public static final ForeignKey<ShoppingCartRecord, ProductRecord> SHOPPING_CART__SHOPPING_CART_PRODUCT_ID_FK = Internal.createForeignKey(ShoppingCart.SHOPPING_CART, DSL.name("shopping_cart_product_id_fk"), new TableField[] { ShoppingCart.SHOPPING_CART.PRODUCT_ID }, Keys.PRODUCT_PKEY, new TableField[] { Product.PRODUCT.ID }, true);
    public static final ForeignKey<ShoppingCartRecord, UserRecord> SHOPPING_CART__SHOPPING_CART_USER_ID_FK = Internal.createForeignKey(ShoppingCart.SHOPPING_CART, DSL.name("shopping_cart_user_id_fk"), new TableField[] { ShoppingCart.SHOPPING_CART.USER_ID }, Keys.USER_PKEY, new TableField[] { User.USER.ID }, true);
}
