/*
 * This file is generated by jOOQ.
 */
package generated_sources.tables;


import generated_sources.Keys;
import generated_sources.Public;
import generated_sources.tables.Product.ProductPath;
import generated_sources.tables.User.UserPath;
import generated_sources.tables.records.ShoppingCartRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ShoppingCart extends TableImpl<ShoppingCartRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.shopping_cart</code>
     */
    public static final ShoppingCart SHOPPING_CART = new ShoppingCart();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShoppingCartRecord> getRecordType() {
        return ShoppingCartRecord.class;
    }

    /**
     * The column <code>public.shopping_cart.id</code>.
     */
    public final TableField<ShoppingCartRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.shopping_cart.user_id</code>.
     */
    public final TableField<ShoppingCartRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.shopping_cart.product_id</code>.
     */
    public final TableField<ShoppingCartRecord, Long> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.shopping_cart.created_at</code>.
     */
    public final TableField<ShoppingCartRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.shopping_cart.update_at</code>.
     */
    public final TableField<ShoppingCartRecord, LocalDateTime> UPDATE_AT = createField(DSL.name("update_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.shopping_cart.total_price</code>.
     */
    public final TableField<ShoppingCartRecord, BigDecimal> TOTAL_PRICE = createField(DSL.name("total_price"), SQLDataType.NUMERIC(38, 2).defaultValue(DSL.field(DSL.raw("NULL::numeric"), SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.shopping_cart.quantity</code>.
     */
    public final TableField<ShoppingCartRecord, Long> QUANTITY = createField(DSL.name("quantity"), SQLDataType.BIGINT, this, "");

    private ShoppingCart(Name alias, Table<ShoppingCartRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ShoppingCart(Name alias, Table<ShoppingCartRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.shopping_cart</code> table reference
     */
    public ShoppingCart(String alias) {
        this(DSL.name(alias), SHOPPING_CART);
    }

    /**
     * Create an aliased <code>public.shopping_cart</code> table reference
     */
    public ShoppingCart(Name alias) {
        this(alias, SHOPPING_CART);
    }

    /**
     * Create a <code>public.shopping_cart</code> table reference
     */
    public ShoppingCart() {
        this(DSL.name("shopping_cart"), null);
    }

    public <O extends Record> ShoppingCart(Table<O> path, ForeignKey<O, ShoppingCartRecord> childPath, InverseForeignKey<O, ShoppingCartRecord> parentPath) {
        super(path, childPath, parentPath, SHOPPING_CART);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ShoppingCartPath extends ShoppingCart implements Path<ShoppingCartRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ShoppingCartPath(Table<O> path, ForeignKey<O, ShoppingCartRecord> childPath, InverseForeignKey<O, ShoppingCartRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ShoppingCartPath(Name alias, Table<ShoppingCartRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ShoppingCartPath as(String alias) {
            return new ShoppingCartPath(DSL.name(alias), this);
        }

        @Override
        public ShoppingCartPath as(Name alias) {
            return new ShoppingCartPath(alias, this);
        }

        @Override
        public ShoppingCartPath as(Table<?> alias) {
            return new ShoppingCartPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ShoppingCartRecord, Long> getIdentity() {
        return (Identity<ShoppingCartRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ShoppingCartRecord> getPrimaryKey() {
        return Keys.SHOPPING_CART_PKEY;
    }

    @Override
    public List<ForeignKey<ShoppingCartRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SHOPPING_CART__SHOPPING_CART_PRODUCT_ID_FK, Keys.SHOPPING_CART__SHOPPING_CART_USER_ID_FK);
    }

    private transient ProductPath _product;

    /**
     * Get the implicit join path to the <code>public.product</code> table.
     */
    public ProductPath product() {
        if (_product == null)
            _product = new ProductPath(this, Keys.SHOPPING_CART__SHOPPING_CART_PRODUCT_ID_FK, null);

        return _product;
    }

    private transient UserPath _user;

    /**
     * Get the implicit join path to the <code>public.user</code> table.
     */
    public UserPath user() {
        if (_user == null)
            _user = new UserPath(this, Keys.SHOPPING_CART__SHOPPING_CART_USER_ID_FK, null);

        return _user;
    }

    @Override
    public ShoppingCart as(String alias) {
        return new ShoppingCart(DSL.name(alias), this);
    }

    @Override
    public ShoppingCart as(Name alias) {
        return new ShoppingCart(alias, this);
    }

    @Override
    public ShoppingCart as(Table<?> alias) {
        return new ShoppingCart(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ShoppingCart rename(String name) {
        return new ShoppingCart(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShoppingCart rename(Name name) {
        return new ShoppingCart(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShoppingCart rename(Table<?> name) {
        return new ShoppingCart(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ShoppingCart where(Condition condition) {
        return new ShoppingCart(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ShoppingCart where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ShoppingCart where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ShoppingCart where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ShoppingCart where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ShoppingCart where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ShoppingCart where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ShoppingCart where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ShoppingCart whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ShoppingCart whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
