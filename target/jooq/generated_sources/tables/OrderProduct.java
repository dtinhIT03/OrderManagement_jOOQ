/*
 * This file is generated by jOOQ.
 */
package generated_sources.tables;


import generated_sources.Keys;
import generated_sources.Public;
import generated_sources.tables.Order.OrderPath;
import generated_sources.tables.Product.ProductPath;
import generated_sources.tables.records.OrderProductRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class OrderProduct extends TableImpl<OrderProductRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.order_product</code>
     */
    public static final OrderProduct ORDER_PRODUCT = new OrderProduct();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderProductRecord> getRecordType() {
        return OrderProductRecord.class;
    }

    /**
     * The column <code>public.order_product.id</code>.
     */
    public final TableField<OrderProductRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.order_product.order_id</code>.
     */
    public final TableField<OrderProductRecord, Long> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.order_product.product_id</code>.
     */
    public final TableField<OrderProductRecord, Long> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.order_product.total_price</code>.
     */
    public final TableField<OrderProductRecord, BigDecimal> TOTAL_PRICE = createField(DSL.name("total_price"), SQLDataType.NUMERIC(38, 2).defaultValue(DSL.field(DSL.raw("NULL::numeric"), SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.order_product.quantity</code>.
     */
    public final TableField<OrderProductRecord, Long> QUANTITY = createField(DSL.name("quantity"), SQLDataType.BIGINT, this, "");

    private OrderProduct(Name alias, Table<OrderProductRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private OrderProduct(Name alias, Table<OrderProductRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.order_product</code> table reference
     */
    public OrderProduct(String alias) {
        this(DSL.name(alias), ORDER_PRODUCT);
    }

    /**
     * Create an aliased <code>public.order_product</code> table reference
     */
    public OrderProduct(Name alias) {
        this(alias, ORDER_PRODUCT);
    }

    /**
     * Create a <code>public.order_product</code> table reference
     */
    public OrderProduct() {
        this(DSL.name("order_product"), null);
    }

    public <O extends Record> OrderProduct(Table<O> path, ForeignKey<O, OrderProductRecord> childPath, InverseForeignKey<O, OrderProductRecord> parentPath) {
        super(path, childPath, parentPath, ORDER_PRODUCT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class OrderProductPath extends OrderProduct implements Path<OrderProductRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> OrderProductPath(Table<O> path, ForeignKey<O, OrderProductRecord> childPath, InverseForeignKey<O, OrderProductRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private OrderProductPath(Name alias, Table<OrderProductRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public OrderProductPath as(String alias) {
            return new OrderProductPath(DSL.name(alias), this);
        }

        @Override
        public OrderProductPath as(Name alias) {
            return new OrderProductPath(alias, this);
        }

        @Override
        public OrderProductPath as(Table<?> alias) {
            return new OrderProductPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<OrderProductRecord, Long> getIdentity() {
        return (Identity<OrderProductRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<OrderProductRecord> getPrimaryKey() {
        return Keys.ORDER_PRODUCT_PKEY;
    }

    @Override
    public List<ForeignKey<OrderProductRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ORDER_PRODUCT__ORDER_PRODUCT_ORDER_ID_FK, Keys.ORDER_PRODUCT__ORDER_PRODUCT_PRODUCT_ID_FK);
    }

    private transient OrderPath _order;

    /**
     * Get the implicit join path to the <code>public.order</code> table.
     */
    public OrderPath order() {
        if (_order == null)
            _order = new OrderPath(this, Keys.ORDER_PRODUCT__ORDER_PRODUCT_ORDER_ID_FK, null);

        return _order;
    }

    private transient ProductPath _product;

    /**
     * Get the implicit join path to the <code>public.product</code> table.
     */
    public ProductPath product() {
        if (_product == null)
            _product = new ProductPath(this, Keys.ORDER_PRODUCT__ORDER_PRODUCT_PRODUCT_ID_FK, null);

        return _product;
    }

    @Override
    public OrderProduct as(String alias) {
        return new OrderProduct(DSL.name(alias), this);
    }

    @Override
    public OrderProduct as(Name alias) {
        return new OrderProduct(alias, this);
    }

    @Override
    public OrderProduct as(Table<?> alias) {
        return new OrderProduct(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderProduct rename(String name) {
        return new OrderProduct(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderProduct rename(Name name) {
        return new OrderProduct(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderProduct rename(Table<?> name) {
        return new OrderProduct(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrderProduct where(Condition condition) {
        return new OrderProduct(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrderProduct where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrderProduct where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrderProduct where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrderProduct where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrderProduct where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrderProduct where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public OrderProduct where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrderProduct whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public OrderProduct whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
