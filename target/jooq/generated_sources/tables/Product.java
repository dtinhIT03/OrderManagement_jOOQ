/*
 * This file is generated by jOOQ.
 */
package generated_sources.tables;


import generated_sources.Keys;
import generated_sources.Public;
import generated_sources.tables.Image.ImagePath;
import generated_sources.tables.OrderProduct.OrderProductPath;
import generated_sources.tables.ShoppingCart.ShoppingCartPath;
import generated_sources.tables.records.ProductRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Product extends TableImpl<ProductRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.product</code>
     */
    public static final Product PRODUCT = new Product();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductRecord> getRecordType() {
        return ProductRecord.class;
    }

    /**
     * The column <code>public.product.id</code>.
     */
    public final TableField<ProductRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.product.title</code>.
     */
    public final TableField<ProductRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.product.description</code>.
     */
    public final TableField<ProductRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.product.created_at</code>.
     */
    public final TableField<ProductRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.product.import_price</code>.
     */
    public final TableField<ProductRecord, BigDecimal> IMPORT_PRICE = createField(DSL.name("import_price"), SQLDataType.NUMERIC(38, 2).nullable(false), this, "");

    /**
     * The column <code>public.product.selling_price</code>.
     */
    public final TableField<ProductRecord, BigDecimal> SELLING_PRICE = createField(DSL.name("selling_price"), SQLDataType.NUMERIC(38, 2).nullable(false), this, "");

    /**
     * The column <code>public.product.sold_quantity</code>.
     */
    public final TableField<ProductRecord, Long> SOLD_QUANTITY = createField(DSL.name("sold_quantity"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.product.quantity</code>.
     */
    public final TableField<ProductRecord, Long> QUANTITY = createField(DSL.name("quantity"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.product.name</code>.
     */
    public final TableField<ProductRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.product.category</code>.
     */
    public final TableField<ProductRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private Product(Name alias, Table<ProductRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Product(Name alias, Table<ProductRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.product</code> table reference
     */
    public Product(String alias) {
        this(DSL.name(alias), PRODUCT);
    }

    /**
     * Create an aliased <code>public.product</code> table reference
     */
    public Product(Name alias) {
        this(alias, PRODUCT);
    }

    /**
     * Create a <code>public.product</code> table reference
     */
    public Product() {
        this(DSL.name("product"), null);
    }

    public <O extends Record> Product(Table<O> path, ForeignKey<O, ProductRecord> childPath, InverseForeignKey<O, ProductRecord> parentPath) {
        super(path, childPath, parentPath, PRODUCT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ProductPath extends Product implements Path<ProductRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ProductPath(Table<O> path, ForeignKey<O, ProductRecord> childPath, InverseForeignKey<O, ProductRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ProductPath(Name alias, Table<ProductRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ProductPath as(String alias) {
            return new ProductPath(DSL.name(alias), this);
        }

        @Override
        public ProductPath as(Name alias) {
            return new ProductPath(alias, this);
        }

        @Override
        public ProductPath as(Table<?> alias) {
            return new ProductPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ProductRecord, Long> getIdentity() {
        return (Identity<ProductRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProductRecord> getPrimaryKey() {
        return Keys.PRODUCT_PKEY;
    }

    private transient ImagePath _image;

    /**
     * Get the implicit to-many join path to the <code>public.image</code> table
     */
    public ImagePath image() {
        if (_image == null)
            _image = new ImagePath(this, null, Keys.IMAGE__IMAGE_PRODUCT_ID_FK.getInverseKey());

        return _image;
    }

    private transient OrderProductPath _orderProduct;

    /**
     * Get the implicit to-many join path to the
     * <code>public.order_product</code> table
     */
    public OrderProductPath orderProduct() {
        if (_orderProduct == null)
            _orderProduct = new OrderProductPath(this, null, Keys.ORDER_PRODUCT__ORDER_PRODUCT_PRODUCT_ID_FK.getInverseKey());

        return _orderProduct;
    }

    private transient ShoppingCartPath _shoppingCart;

    /**
     * Get the implicit to-many join path to the
     * <code>public.shopping_cart</code> table
     */
    public ShoppingCartPath shoppingCart() {
        if (_shoppingCart == null)
            _shoppingCart = new ShoppingCartPath(this, null, Keys.SHOPPING_CART__SHOPPING_CART_PRODUCT_ID_FK.getInverseKey());

        return _shoppingCart;
    }

    @Override
    public Product as(String alias) {
        return new Product(DSL.name(alias), this);
    }

    @Override
    public Product as(Name alias) {
        return new Product(alias, this);
    }

    @Override
    public Product as(Table<?> alias) {
        return new Product(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Product rename(String name) {
        return new Product(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Product rename(Name name) {
        return new Product(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Product rename(Table<?> name) {
        return new Product(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Product where(Condition condition) {
        return new Product(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Product where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Product where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Product where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Product where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Product where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Product where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Product where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Product whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Product whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
