/*
 * This file is generated by jOOQ.
 */
package generated_sources.tables;


import generated_sources.Keys;
import generated_sources.Public;
import generated_sources.tables.OrderProduct.OrderProductPath;
import generated_sources.tables.User.UserPath;
import generated_sources.tables.records.OrderRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Order extends TableImpl<OrderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.order</code>
     */
    public static final Order ORDER = new Order();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderRecord> getRecordType() {
        return OrderRecord.class;
    }

    /**
     * The column <code>public.order.id</code>.
     */
    public final TableField<OrderRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.order.date_order</code>.
     */
    public final TableField<OrderRecord, LocalDateTime> DATE_ORDER = createField(DSL.name("date_order"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.order.date_delivery</code>.
     */
    public final TableField<OrderRecord, LocalDateTime> DATE_DELIVERY = createField(DSL.name("date_delivery"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.order.date_recieve</code>.
     */
    public final TableField<OrderRecord, LocalDateTime> DATE_RECIEVE = createField(DSL.name("date_recieve"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.order.user_id</code>.
     */
    public final TableField<OrderRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.order.status</code>.
     */
    public final TableField<OrderRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field(DSL.raw("'PENDING'::text"), SQLDataType.CLOB)), this, "");

    private Order(Name alias, Table<OrderRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Order(Name alias, Table<OrderRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.order</code> table reference
     */
    public Order(String alias) {
        this(DSL.name(alias), ORDER);
    }

    /**
     * Create an aliased <code>public.order</code> table reference
     */
    public Order(Name alias) {
        this(alias, ORDER);
    }

    /**
     * Create a <code>public.order</code> table reference
     */
    public Order() {
        this(DSL.name("order"), null);
    }

    public <O extends Record> Order(Table<O> path, ForeignKey<O, OrderRecord> childPath, InverseForeignKey<O, OrderRecord> parentPath) {
        super(path, childPath, parentPath, ORDER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class OrderPath extends Order implements Path<OrderRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> OrderPath(Table<O> path, ForeignKey<O, OrderRecord> childPath, InverseForeignKey<O, OrderRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private OrderPath(Name alias, Table<OrderRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public OrderPath as(String alias) {
            return new OrderPath(DSL.name(alias), this);
        }

        @Override
        public OrderPath as(Name alias) {
            return new OrderPath(alias, this);
        }

        @Override
        public OrderPath as(Table<?> alias) {
            return new OrderPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<OrderRecord, Long> getIdentity() {
        return (Identity<OrderRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<OrderRecord> getPrimaryKey() {
        return Keys.ORDER_PKEY;
    }

    @Override
    public List<ForeignKey<OrderRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ORDER__ORDER_USER_ID_FK);
    }

    private transient UserPath _user;

    /**
     * Get the implicit join path to the <code>public.user</code> table.
     */
    public UserPath user() {
        if (_user == null)
            _user = new UserPath(this, Keys.ORDER__ORDER_USER_ID_FK, null);

        return _user;
    }

    private transient OrderProductPath _orderProduct;

    /**
     * Get the implicit to-many join path to the
     * <code>public.order_product</code> table
     */
    public OrderProductPath orderProduct() {
        if (_orderProduct == null)
            _orderProduct = new OrderProductPath(this, null, Keys.ORDER_PRODUCT__ORDER_PRODUCT_ORDER_ID_FK.getInverseKey());

        return _orderProduct;
    }

    @Override
    public List<Check<OrderRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("order_status_check"), "((status = ANY (ARRAY['PENDING'::text, 'PROCESSING'::text, 'SHIPPED'::text, 'DELIVERED'::text, 'RECIEVED'::text, 'CANCELED'::text, 'FAILED'::text, 'RETURNED'::text])))", true)
        );
    }

    @Override
    public Order as(String alias) {
        return new Order(DSL.name(alias), this);
    }

    @Override
    public Order as(Name alias) {
        return new Order(alias, this);
    }

    @Override
    public Order as(Table<?> alias) {
        return new Order(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(String name) {
        return new Order(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(Name name) {
        return new Order(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(Table<?> name) {
        return new Order(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Order where(Condition condition) {
        return new Order(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Order where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Order where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Order where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Order where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Order where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Order where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Order where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Order whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Order whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
